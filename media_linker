#!/usr/bin/perl -w

use strict;

use Linux::Inotify2;

use File::Basename;

my $dest_dir = (($#ARGV >= 0)?$ARGV[0]:undef) || "/media/pi";
my $link_dir = (($#ARGV >= 1)?$ARGV[1]:undef) || "/linked_media";

$dest_dir =~ s@/$@@;
$link_dir =~ s@/$@@;

my $debug_flag = 0;

sub debug
{
	print @_ if $debug_flag;
}

my $inotify = new Linux::Inotify2 || die "Unable to create inotify object: $!";
$inotify->blocking(1);

my $mask = IN_MODIFY | IN_CREATE | IN_DELETE | IN_DELETE_SELF | IN_MOVE_SELF | IN_MOVED_TO;

#First we need to wait for the source directory to exist:
#

my $cur_dir = $dest_dir;

my @dirs_pending = ();

while(!-e $cur_dir)
{
	unshift(@dirs_pending, basename($cur_dir));
	$cur_dir = dirname($cur_dir);
}

while(@dirs_pending > 0)
{
	my $new_level = shift(@dirs_pending);
	my $new_dir = "$cur_dir/$new_level";
	$new_dir =~ s@^//@/@;

	my $watcher = $inotify->watch($cur_dir, $mask) || die "Failed to watch $cur_dir: $!";
	while(!-e $new_dir)
	{
		&debug("Waiting for $new_dir\n");
		my @events = $inotify->read;
		if($debug_flag)
		{
			&debug(sprintf("name: %s, mask: %d\n", $_->name, $_->mask)) foreach @events;
		}
	}
	$cur_dir = $new_dir;
	#We'll watch the next subdirectory when we get back around
	$watcher->cancel;
}

die("Impossible happened, \$cur_dir should be $dest_dir by now, but it is $cur_dir") if $cur_dir ne $dest_dir;

&debug("Found $dest_dir\n");

my $watcher = $inotify->watch($dest_dir, $mask) || die "Failed to watch $dest_dir: $!";

my %link;

my %reverse;

&debug("Reading old links\n");

opendir(TARGETDIR,$link_dir) || die "Failed to open $link_dir: $!";

while(my $old = readdir(TARGETDIR))
{
	next if $old eq '.' || $old eq '..';
	my $name = "$link_dir/$old";
	next if(!-l $name);
	my $target = readlink($name);
	$link{$old} = $target;
	$reverse{$target} = $old;
}
closedir(TARGETDIR);

&check_names();

while(1)
{
	&debug("waiting for events\n");
	my @events = $inotify->read();
	&debug("got events\n");
	if($debug_flag)
	{
		&debug(sprintf("name: %s, mask: %d\n", $_->name, $_->mask)) foreach @events;
	}
	&check_names();
}

sub check_names
{
	opendir(DIR,$dest_dir) || die "Failed to open $dest_dir: $!";
	my @names = grep{$_  !~ /\/\.\.?$/ && -d $_} map {"$dest_dir/$_"} readdir(DIR);
	closedir(DIR);
	&debug("Names is: @names\n");
	my %this_pass = map {$_=>1} @names;
	my @old_links = keys(%link);
	foreach my $linkname (@old_links)
	{
		my $target = $link{$linkname};
		next if(defined($this_pass{$target}));
		&debug("Deleting link $link_dir/$linkname\n");
		unlink("$link_dir/$linkname") || warn ("Failed to delete old symlink: $!");
		delete($link{$linkname});
		delete($reverse{$target});
	}
	foreach my $target (@names)
	{
		next if(defined($reverse{$target}));
		my $index = 0;
		my $linkname = "card" . (++$index);
		while(-l "$link_dir/$linkname" || -e "$link_dir/$linkname")
		{
			$linkname = "card" . (++$index);
		}
		&debug("Creating link $link_dir/$linkname to $target\n");
		symlink($target, "$link_dir/$linkname") || warn("Failed to create symlink: $!");
		$link{$linkname} = $target;
		$reverse{$target} = $linkname;
	}
}
